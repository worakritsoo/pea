/* list-index.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init as init_1,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7, f7ready } from "../shared/f7";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	let div_levels = [
		{ class: /*classes*/ ctx[2] },
		{ "data-f7-slot": /*f7Slot*/ ctx[0] },
		restProps(/*$$restProps*/ ctx[3])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[18](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
				(!current || dirty & /*f7Slot*/ 1) && { "data-f7-slot": /*f7Slot*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[18](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","init","listEl","indexes","scrollList","label","iosItemHeight","mdItemHeight","auroraItemHeight","f7Slot","instance","update","scrollListToIndex"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { init = true } = $$props;
	let { listEl = undefined } = $$props;
	let { indexes = "auto" } = $$props;
	let { scrollList = true } = $$props;
	let { label = false } = $$props;
	let { iosItemHeight = 14 } = $$props;
	let { mdItemHeight = 14 } = $$props;
	let { auroraItemHeight = 14 } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;
	let f7ListIndex;

	function instance() {
		return f7ListIndex;
	}

	function update() {
		if (!f7ListIndex) return;
		f7ListIndex.update();
	}

	function scrollListToIndex(indexContent) {
		if (!f7ListIndex) return;
		f7ListIndex.scrollListToIndex(indexContent);
	}

	let initialWatched = false;

	function watchIndexes() {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7ListIndex) return;
		f7ListIndex.params.indexes = indexes;
		update();
	}

	onMount(() => {
		if (!init || !el) return;

		f7ready(() => {
			f7ListIndex = f7.listIndex.create({
				el,
				listEl,
				indexes,
				iosItemHeight,
				mdItemHeight,
				auroraItemHeight,
				scrollList,
				label,
				on: {
					select(index, itemContent, itemIndex) {
						emit("listIndexSelect", [itemContent, itemIndex]);
					}
				}
			});
		});
	});

	onDestroy(() => {
		if (f7ListIndex && f7ListIndex.destroy) f7ListIndex.destroy();
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(1, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("init" in $$new_props) $$invalidate(5, init = $$new_props.init);
		if ("listEl" in $$new_props) $$invalidate(6, listEl = $$new_props.listEl);
		if ("indexes" in $$new_props) $$invalidate(7, indexes = $$new_props.indexes);
		if ("scrollList" in $$new_props) $$invalidate(8, scrollList = $$new_props.scrollList);
		if ("label" in $$new_props) $$invalidate(9, label = $$new_props.label);
		if ("iosItemHeight" in $$new_props) $$invalidate(10, iosItemHeight = $$new_props.iosItemHeight);
		if ("mdItemHeight" in $$new_props) $$invalidate(11, mdItemHeight = $$new_props.mdItemHeight);
		if ("auroraItemHeight" in $$new_props) $$invalidate(12, auroraItemHeight = $$new_props.auroraItemHeight);
		if ("f7Slot" in $$new_props) $$invalidate(0, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	let classes;

	$$self.$$.update = () => {
		$: $$invalidate(2, classes = classNames(className, "list-index", colorClasses($$props)));

		if ($$self.$$.dirty & /*indexes*/ 128) {
			$: watchIndexes(indexes);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		f7Slot,
		el,
		classes,
		$$restProps,
		className,
		init,
		listEl,
		indexes,
		scrollList,
		label,
		iosItemHeight,
		mdItemHeight,
		auroraItemHeight,
		instance,
		update,
		scrollListToIndex,
		$$scope,
		slots,
		div_binding
	];
}

class List_index extends SvelteComponent {
	constructor(options) {
		super();

		init_1(this, options, instance_1, create_fragment, safe_not_equal, {
			class: 4,
			init: 5,
			listEl: 6,
			indexes: 7,
			scrollList: 8,
			label: 9,
			iosItemHeight: 10,
			mdItemHeight: 11,
			auroraItemHeight: 12,
			f7Slot: 0,
			instance: 13,
			update: 14,
			scrollListToIndex: 15
		});
	}

	get instance() {
		return this.$$.ctx[13];
	}

	get update() {
		return this.$$.ctx[14];
	}

	get scrollListToIndex() {
		return this.$$.ctx[15];
	}
}

export default List_index;