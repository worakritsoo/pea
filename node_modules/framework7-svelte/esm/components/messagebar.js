/* messagebar.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init as init_1,
	insert,
	mount_component,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy, afterUpdate } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, noUndefinedProps, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7, f7ready } from "../shared/f7";
import { hasSlots } from "../shared/has-slots";
import Link from "./link";
import Input from "./input";
const get_after_inner_slot_changes_1 = dirty => ({});
const get_after_inner_slot_context_1 = ctx => ({});
const get_inner_end_slot_changes = dirty => ({});
const get_inner_end_slot_context = ctx => ({});
const get_send_link_slot_changes = dirty => ({});
const get_send_link_slot_context = ctx => ({});
const get_after_inner_slot_changes = dirty => ({});
const get_after_inner_slot_context = ctx => ({});
const get_before_area_slot_changes = dirty => ({});
const get_before_area_slot_context = ctx => ({});
const get_inner_start_slot_changes = dirty => ({});
const get_inner_start_slot_context = ctx => ({});
const get_before_inner_slot_changes = dirty => ({});
const get_before_inner_slot_context = ctx => ({});

// (205:4) {#if (sendLink && sendLink.length > 0) || hasSendLinkSlots}
function create_if_block(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				onClick: /*onClick*/ ctx[16],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};

			if (dirty[0] & /*$$scope, sendLink*/ 1073741828) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (206:6) <Link {onClick}>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;
	const send_link_slot_template = /*#slots*/ ctx[28]["send-link"];
	const send_link_slot = create_slot(send_link_slot_template, ctx, /*$$scope*/ ctx[30], get_send_link_slot_context);

	return {
		c() {
			if (send_link_slot) send_link_slot.c();
			t0 = space();
			t1 = text(/*sendLink*/ ctx[2]);
		},
		m(target, anchor) {
			if (send_link_slot) {
				send_link_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			insert(target, t1, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (send_link_slot) {
				if (send_link_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(send_link_slot, send_link_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_send_link_slot_changes, get_send_link_slot_context);
				}
			}

			if (!current || dirty[0] & /*sendLink*/ 4) set_data(t1, /*sendLink*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(send_link_slot, local);
			current = true;
		},
		o(local) {
			transition_out(send_link_slot, local);
			current = false;
		},
		d(detaching) {
			if (send_link_slot) send_link_slot.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let t0;
	let div1;
	let t1;
	let div0;
	let t2;
	let input;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let current;
	const before_inner_slot_template = /*#slots*/ ctx[28]["before-inner"];
	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[30], get_before_inner_slot_context);
	const inner_start_slot_template = /*#slots*/ ctx[28]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[30], get_inner_start_slot_context);
	const before_area_slot_template = /*#slots*/ ctx[28]["before-area"];
	const before_area_slot = create_slot(before_area_slot_template, ctx, /*$$scope*/ ctx[30], get_before_area_slot_context);

	input = new Input({
			props: {
				id: /*textareaId*/ ctx[5],
				type: "textarea",
				wrap: false,
				placeholder: /*placeholder*/ ctx[7],
				disabled: /*disabled*/ ctx[3],
				name: /*name*/ ctx[6],
				readonly: /*readonly*/ ctx[4],
				resizable: /*resizable*/ ctx[1],
				value: typeof /*value*/ ctx[0] === "undefined"
				? ""
				: /*value*/ ctx[0]
			}
		});

	input.$on("input", /*onInput*/ ctx[13]);
	input.$on("change", /*onChange*/ ctx[12]);
	input.$on("focus", /*onFocus*/ ctx[14]);
	input.$on("blur", /*onBlur*/ ctx[15]);
	const after_inner_slot_template = /*#slots*/ ctx[28]["after-inner"];
	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[30], get_after_inner_slot_context);
	let if_block = (/*sendLink*/ ctx[2] && /*sendLink*/ ctx[2].length > 0 || /*hasSendLinkSlots*/ ctx[11]) && create_if_block(ctx);
	const inner_end_slot_template = /*#slots*/ ctx[28]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[30], get_inner_end_slot_context);
	const default_slot_template = /*#slots*/ ctx[28].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[30], null);
	const after_inner_slot_template_1 = /*#slots*/ ctx[28]["after-inner"];
	const after_inner_slot_1 = create_slot(after_inner_slot_template_1, ctx, /*$$scope*/ ctx[30], get_after_inner_slot_context_1);

	let div2_levels = [
		{ class: /*classes*/ ctx[10] },
		{ "data-f7-slot": /*f7Slot*/ ctx[8] },
		restProps(/*$$restProps*/ ctx[17])
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (before_inner_slot) before_inner_slot.c();
			t0 = space();
			div1 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t1 = space();
			div0 = element("div");
			if (before_area_slot) before_area_slot.c();
			t2 = space();
			create_component(input.$$.fragment);
			t3 = space();
			if (after_inner_slot) after_inner_slot.c();
			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			if (inner_end_slot) inner_end_slot.c();
			t6 = space();
			if (default_slot) default_slot.c();
			t7 = space();
			if (after_inner_slot_1) after_inner_slot_1.c();
			attr(div0, "class", "messagebar-area");
			attr(div1, "class", "toolbar-inner");
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);

			if (before_inner_slot) {
				before_inner_slot.m(div2, null);
			}

			append(div2, t0);
			append(div2, div1);

			if (inner_start_slot) {
				inner_start_slot.m(div1, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (before_area_slot) {
				before_area_slot.m(div0, null);
			}

			append(div0, t2);
			mount_component(input, div0, null);
			append(div0, t3);

			if (after_inner_slot) {
				after_inner_slot.m(div0, null);
			}

			append(div1, t4);
			if (if_block) if_block.m(div1, null);
			append(div1, t5);

			if (inner_end_slot) {
				inner_end_slot.m(div1, null);
			}

			append(div1, t6);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t7);

			if (after_inner_slot_1) {
				after_inner_slot_1.m(div2, null);
			}

			/*div2_binding*/ ctx[29](div2);
			current = true;
		},
		p(ctx, dirty) {
			if (before_inner_slot) {
				if (before_inner_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_before_inner_slot_changes, get_before_inner_slot_context);
				}
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_inner_start_slot_changes, get_inner_start_slot_context);
				}
			}

			if (before_area_slot) {
				if (before_area_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(before_area_slot, before_area_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_before_area_slot_changes, get_before_area_slot_context);
				}
			}

			const input_changes = {};
			if (dirty[0] & /*textareaId*/ 32) input_changes.id = /*textareaId*/ ctx[5];
			if (dirty[0] & /*placeholder*/ 128) input_changes.placeholder = /*placeholder*/ ctx[7];
			if (dirty[0] & /*disabled*/ 8) input_changes.disabled = /*disabled*/ ctx[3];
			if (dirty[0] & /*name*/ 64) input_changes.name = /*name*/ ctx[6];
			if (dirty[0] & /*readonly*/ 16) input_changes.readonly = /*readonly*/ ctx[4];
			if (dirty[0] & /*resizable*/ 2) input_changes.resizable = /*resizable*/ ctx[1];

			if (dirty[0] & /*value*/ 1) input_changes.value = typeof /*value*/ ctx[0] === "undefined"
			? ""
			: /*value*/ ctx[0];

			input.$set(input_changes);

			if (after_inner_slot) {
				if (after_inner_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_after_inner_slot_changes, get_after_inner_slot_context);
				}
			}

			if (/*sendLink*/ ctx[2] && /*sendLink*/ ctx[2].length > 0 || /*hasSendLinkSlots*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*sendLink, hasSendLinkSlots*/ 2052) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t5);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[30], dirty, get_inner_end_slot_changes, get_inner_end_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[30], dirty, null, null);
				}
			}

			if (after_inner_slot_1) {
				if (after_inner_slot_1.p && dirty[0] & /*$$scope*/ 1073741824) {
					update_slot(after_inner_slot_1, after_inner_slot_template_1, ctx, /*$$scope*/ ctx[30], dirty, get_after_inner_slot_changes_1, get_after_inner_slot_context_1);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty[0] & /*classes*/ 1024) && { class: /*classes*/ ctx[10] },
				(!current || dirty[0] & /*f7Slot*/ 256) && { "data-f7-slot": /*f7Slot*/ ctx[8] },
				dirty[0] & /*$$restProps*/ 131072 && restProps(/*$$restProps*/ ctx[17])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_inner_slot, local);
			transition_in(inner_start_slot, local);
			transition_in(before_area_slot, local);
			transition_in(input.$$.fragment, local);
			transition_in(after_inner_slot, local);
			transition_in(if_block);
			transition_in(inner_end_slot, local);
			transition_in(default_slot, local);
			transition_in(after_inner_slot_1, local);
			current = true;
		},
		o(local) {
			transition_out(before_inner_slot, local);
			transition_out(inner_start_slot, local);
			transition_out(before_area_slot, local);
			transition_out(input.$$.fragment, local);
			transition_out(after_inner_slot, local);
			transition_out(if_block);
			transition_out(inner_end_slot, local);
			transition_out(default_slot, local);
			transition_out(after_inner_slot_1, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (before_inner_slot) before_inner_slot.d(detaching);
			if (inner_start_slot) inner_start_slot.d(detaching);
			if (before_area_slot) before_area_slot.d(detaching);
			destroy_component(input);
			if (after_inner_slot) after_inner_slot.d(detaching);
			if (if_block) if_block.d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (after_inner_slot_1) after_inner_slot_1.d(detaching);
			/*div2_binding*/ ctx[29](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","sheetVisible","attachmentsVisible","top","resizable","bottomOffset","topOffset","maxHeight","resizePage","sendLink","value","disabled","readonly","textareaId","name","placeholder","init","f7Slot","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { sheetVisible = false } = $$props;
	let { attachmentsVisible = false } = $$props;
	let { top = false } = $$props;
	let { resizable = true } = $$props;
	let { bottomOffset = 0 } = $$props;
	let { topOffset = 0 } = $$props;
	let { maxHeight = undefined } = $$props;
	let { resizePage = true } = $$props;
	let { sendLink = undefined } = $$props;
	let { value = undefined } = $$props;
	let { disabled = false } = $$props;
	let { readonly = false } = $$props;
	let { textareaId = undefined } = $$props;
	let { name = undefined } = $$props;
	let { placeholder = "Message" } = $$props;
	let { init = true } = $$props;
	let { f7Slot = "fixed" } = $$props;
	let el;
	let f7Messagebar;
	let updateSheetVisible;
	let updateAttachmentsVisible;

	function instance() {
		return f7Messagebar;
	}

	let initialWatchedSheet = false;

	function watchSheetVisible() {
		if (!initialWatchedSheet) {
			initialWatchedSheet = true;
			return;
		}

		if (!resizable || !f7Messagebar) return;
		updateSheetVisible = true;
	}

	let initialWatchedAttachments;

	function watchAttachmentsVisible() {
		if (!initialWatchedAttachments) {
			initialWatchedAttachments = true;
			return;
		}

		if (!resizable || !f7Messagebar) return;
		updateAttachmentsVisible = true;
	}

	function onChange(event) {
		emit("change", [...event.detail]);
	}

	function onInput(event) {
		emit("input", [...event.detail]);
		$$invalidate(0, value = event.detail[0].target.value);
	}

	function onFocus(event) {
		emit("focus", [...event.detail]);
	}

	function onBlur(event) {
		emit("blur", [...event.detail]);
	}

	function onClick(event) {
		const inputValue = el.querySelector("textarea");

		const clear = f7Messagebar
		? () => {
				f7Messagebar.clear();
			}
		: () => {
				
			};

		emit("submit", [inputValue, clear]);
		emit("send", [inputValue, clear]);
		emit("click", [event]);
	}

	function onAttachmentDelete(inst, attachmentEl, attachmentElIndex) {
		emit("messagebarAttachmentDelete", [inst, attachmentEl, attachmentElIndex]);
	}

	function onAttachmentClick(inst, attachmentEl, attachmentElIndex) {
		emit("messagebarAttachmentClick", [inst, attachmentEl, attachmentElIndex]);
	}

	function onResizePage(inst) {
		emit("messagebarResizePage", [inst]);
	}

	onMount(() => {
		if (!init || !el) return;

		f7ready(() => {
			if (el) {
				const dom7 = f7.$;
				const attachmentsEl = dom7(el).find(".toolbar-inner > .messagebar-attachments");
				if (attachmentsEl.length) dom7(el).find(".messagebar-area").prepend(attachmentsEl);
				const sheetEl = dom7(el).find(".toolbar-inner > .messagebar-sheet");
				if (sheetEl.length) dom7(el).append(sheetEl);
			}

			f7Messagebar = f7.messagebar.create(noUndefinedProps({
				el,
				top,
				resizePage,
				bottomOffset,
				topOffset,
				maxHeight,
				on: {
					attachmentDelete: onAttachmentDelete,
					attachmentClick: onAttachmentClick,
					resizePage: onResizePage
				}
			}));
		});
	});

	afterUpdate(() => {
		if (!f7Messagebar) return;

		if (el && f7) {
			const dom7 = f7.$;
			const attachmentsEl = dom7(el).find(".toolbar-inner > .messagebar-attachments");
			if (attachmentsEl.length) dom7(el).find(".messagebar-area").prepend(attachmentsEl);
			const sheetEl = dom7(el).find(".toolbar-inner > .messagebar-sheet");
			if (sheetEl.length) dom7(el).append(sheetEl);
		}

		if (updateSheetVisible) {
			updateSheetVisible = false;
			f7Messagebar.sheetVisible = sheetVisible;
			f7Messagebar.resizePage();
		}

		if (updateAttachmentsVisible) {
			updateAttachmentsVisible = false;
			f7Messagebar.attachmentsVisible = attachmentsVisible;
			f7Messagebar.resizePage();
		}
	});

	onDestroy(() => {
		if (f7Messagebar && f7Messagebar.destroy) {
			f7Messagebar.destroy();
			f7Messagebar = null;
		}
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(9, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(42, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(18, className = $$new_props.class);
		if ("sheetVisible" in $$new_props) $$invalidate(19, sheetVisible = $$new_props.sheetVisible);
		if ("attachmentsVisible" in $$new_props) $$invalidate(20, attachmentsVisible = $$new_props.attachmentsVisible);
		if ("top" in $$new_props) $$invalidate(21, top = $$new_props.top);
		if ("resizable" in $$new_props) $$invalidate(1, resizable = $$new_props.resizable);
		if ("bottomOffset" in $$new_props) $$invalidate(22, bottomOffset = $$new_props.bottomOffset);
		if ("topOffset" in $$new_props) $$invalidate(23, topOffset = $$new_props.topOffset);
		if ("maxHeight" in $$new_props) $$invalidate(24, maxHeight = $$new_props.maxHeight);
		if ("resizePage" in $$new_props) $$invalidate(25, resizePage = $$new_props.resizePage);
		if ("sendLink" in $$new_props) $$invalidate(2, sendLink = $$new_props.sendLink);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("readonly" in $$new_props) $$invalidate(4, readonly = $$new_props.readonly);
		if ("textareaId" in $$new_props) $$invalidate(5, textareaId = $$new_props.textareaId);
		if ("name" in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ("placeholder" in $$new_props) $$invalidate(7, placeholder = $$new_props.placeholder);
		if ("init" in $$new_props) $$invalidate(26, init = $$new_props.init);
		if ("f7Slot" in $$new_props) $$invalidate(8, f7Slot = $$new_props.f7Slot);
		if ("$$scope" in $$new_props) $$invalidate(30, $$scope = $$new_props.$$scope);
	};

	let classes;
	let hasSendLinkSlots;

	$$self.$$.update = () => {
		$: $$invalidate(10, classes = classNames(
			className,
			"toolbar",
			"messagebar",
			{
				"messagebar-attachments-visible": attachmentsVisible,
				"messagebar-sheet-visible": sheetVisible
			},
			colorClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*sheetVisible*/ 524288) {
			$: watchSheetVisible(sheetVisible);
		}

		if ($$self.$$.dirty[0] & /*attachmentsVisible*/ 1048576) {
			$: watchAttachmentsVisible(attachmentsVisible);
		}
	};

	$: $$invalidate(11, hasSendLinkSlots = hasSlots(arguments, "send-link"));
	$$props = exclude_internal_props($$props);

	return [
		value,
		resizable,
		sendLink,
		disabled,
		readonly,
		textareaId,
		name,
		placeholder,
		f7Slot,
		el,
		classes,
		hasSendLinkSlots,
		onChange,
		onInput,
		onFocus,
		onBlur,
		onClick,
		$$restProps,
		className,
		sheetVisible,
		attachmentsVisible,
		top,
		bottomOffset,
		topOffset,
		maxHeight,
		resizePage,
		init,
		instance,
		slots,
		div2_binding,
		$$scope
	];
}

class Messagebar extends SvelteComponent {
	constructor(options) {
		super();

		init_1(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				class: 18,
				sheetVisible: 19,
				attachmentsVisible: 20,
				top: 21,
				resizable: 1,
				bottomOffset: 22,
				topOffset: 23,
				maxHeight: 24,
				resizePage: 25,
				sendLink: 2,
				value: 0,
				disabled: 3,
				readonly: 4,
				textareaId: 5,
				name: 6,
				placeholder: 7,
				init: 26,
				f7Slot: 8,
				instance: 27
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[27];
	}
}

export default Messagebar;