/* popover.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7, f7ready } from "../shared/f7";
import { modalStateClasses } from "../shared/modal-state-classes";

function create_fragment(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
	let div2_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "popover-angle");
			attr(div1, "class", "popover-inner");
			set_attributes(div2, div2_data);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			/*div2_binding*/ ctx[16](div2);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
				}
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
			/*div2_binding*/ ctx[16](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","opened","animate","targetEl","backdrop","backdropEl","closeByBackdropClick","closeByOutsideClick","closeOnEscape","containerEl","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { opened = undefined } = $$props;
	let { animate = undefined } = $$props;
	let { targetEl = undefined } = $$props;
	let { backdrop = undefined } = $$props;
	let { backdropEl = undefined } = $$props;
	let { closeByBackdropClick = undefined } = $$props;
	let { closeByOutsideClick = undefined } = $$props;
	let { closeOnEscape = undefined } = $$props;
	let { containerEl = undefined } = $$props;
	let el;
	let f7Popover;
	const state = { isOpened: opened, isClosing: false };

	function instance() {
		return f7Popover;
	}

	function onOpen(instance) {
		Object.assign(state, { isOpened: true, isClosing: false });
		emit("popoverOpen", [instance]);
		$$invalidate(3, opened = true);
	}

	function onOpened(instance) {
		emit("popoverOpened", [instance]);
	}

	function onClose(instance) {
		Object.assign(state, { isOpened: false, isClosing: true });
		emit("popoverClose", [instance]);
	}

	function onClosed(instance) {
		Object.assign(state, { isClosing: false });
		emit("popoverClosed", [instance]);
		$$invalidate(3, opened = false);
	}

	let initialWatched = false;

	function watchOpened(openedPassed) {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7Popover) return;
		if (openedPassed) f7Popover.open(); else f7Popover.close();
	}

	onMount(() => {
		const params = {
			el,
			on: {
				open: onOpen,
				opened: onOpened,
				close: onClose,
				closed: onClosed
			}
		};

		if (targetEl) params.targetEl = targetEl;
		if (typeof animate !== "undefined") params.animate = animate;
		if (typeof closeByBackdropClick !== "undefined") params.closeByBackdropClick = closeByBackdropClick;
		if (typeof closeByOutsideClick !== "undefined") params.closeByOutsideClick = closeByOutsideClick;
		if (typeof closeOnEscape !== "undefined") params.closeOnEscape = closeOnEscape;
		if (typeof backdrop !== "undefined") params.backdrop = backdrop;
		if (typeof backdropEl !== "undefined") params.backdropEl = backdropEl;
		if (typeof containerEl !== "undefined") params.containerEl = containerEl;

		f7ready(() => {
			f7Popover = f7.popover.create(params);

			if (opened) {
				f7Popover.open(targetEl, false);
			}
		});
	});

	onDestroy(() => {
		if (f7Popover) f7Popover.destroy();
		f7Popover = null;
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("opened" in $$new_props) $$invalidate(3, opened = $$new_props.opened);
		if ("animate" in $$new_props) $$invalidate(5, animate = $$new_props.animate);
		if ("targetEl" in $$new_props) $$invalidate(6, targetEl = $$new_props.targetEl);
		if ("backdrop" in $$new_props) $$invalidate(7, backdrop = $$new_props.backdrop);
		if ("backdropEl" in $$new_props) $$invalidate(8, backdropEl = $$new_props.backdropEl);
		if ("closeByBackdropClick" in $$new_props) $$invalidate(9, closeByBackdropClick = $$new_props.closeByBackdropClick);
		if ("closeByOutsideClick" in $$new_props) $$invalidate(10, closeByOutsideClick = $$new_props.closeByOutsideClick);
		if ("closeOnEscape" in $$new_props) $$invalidate(11, closeOnEscape = $$new_props.closeOnEscape);
		if ("containerEl" in $$new_props) $$invalidate(12, containerEl = $$new_props.containerEl);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	let classes;

	$$self.$$.update = () => {
		$: $$invalidate(1, classes = classNames(className, "popover", modalStateClasses(state), colorClasses($$props)));

		if ($$self.$$.dirty & /*opened*/ 8) {
			$: watchOpened(opened);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		el,
		classes,
		$$restProps,
		opened,
		className,
		animate,
		targetEl,
		backdrop,
		backdropEl,
		closeByBackdropClick,
		closeByOutsideClick,
		closeOnEscape,
		containerEl,
		instance,
		$$scope,
		slots,
		div2_binding
	];
}

class Popover extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance_1, create_fragment, safe_not_equal, {
			class: 4,
			opened: 3,
			animate: 5,
			targetEl: 6,
			backdrop: 7,
			backdropEl: 8,
			closeByBackdropClick: 9,
			closeByOutsideClick: 10,
			closeOnEscape: 11,
			containerEl: 12,
			instance: 13
		});
	}

	get instance() {
		return this.$$.ctx[13];
	}
}

export default Popover;