/* sheet.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7, f7ready } from "../shared/f7";
import { modalStateClasses } from "../shared/modal-state-classes";
const get_static_slot_changes = dirty => ({});
const get_static_slot_context = ctx => ({});
const get_fixed_slot_changes = dirty => ({});
const get_fixed_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let current;
	const fixed_slot_template = /*#slots*/ ctx[22].fixed;
	const fixed_slot = create_slot(fixed_slot_template, ctx, /*$$scope*/ ctx[21], get_fixed_slot_context);
	const default_slot_template = /*#slots*/ ctx[22].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);
	const static_slot_template = /*#slots*/ ctx[22].static;
	const static_slot = create_slot(static_slot_template, ctx, /*$$scope*/ ctx[21], get_static_slot_context);
	let div1_levels = [{ class: /*classes*/ ctx[2] }, restProps(/*$$restProps*/ ctx[3])];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (fixed_slot) fixed_slot.c();
			t0 = space();
			div0 = element("div");
			if (default_slot) default_slot.c();
			t1 = space();
			if (static_slot) static_slot.c();
			attr(div0, "class", "sheet-modal-inner");
			set_attributes(div1, div1_data);
		},
		m(target, anchor) {
			insert(target, div1, anchor);

			if (fixed_slot) {
				fixed_slot.m(div1, null);
			}

			append(div1, t0);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			append(div0, t1);

			if (static_slot) {
				static_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[23](div0);
			/*div1_binding*/ ctx[24](div1);
			current = true;
		},
		p(ctx, dirty) {
			if (fixed_slot) {
				if (fixed_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(fixed_slot, fixed_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_fixed_slot_changes, get_fixed_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[21], dirty, null, null);
				}
			}

			if (static_slot) {
				if (static_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(static_slot, static_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_static_slot_changes, get_static_slot_context);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty[0] & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
				dirty[0] & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(fixed_slot, local);
			transition_in(default_slot, local);
			transition_in(static_slot, local);
			current = true;
		},
		o(local) {
			transition_out(fixed_slot, local);
			transition_out(default_slot, local);
			transition_out(static_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (fixed_slot) fixed_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (static_slot) static_slot.d(detaching);
			/*div0_binding*/ ctx[23](null);
			/*div1_binding*/ ctx[24](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","opened","animate","top","bottom","position","backdrop","backdropEl","closeByBackdropClick","closeByOutsideClick","closeOnEscape","push","swipeToClose","swipeToStep","swipeHandler","containerEl","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { opened = undefined } = $$props;
	let { animate = undefined } = $$props;
	let { top = undefined } = $$props;
	let { bottom = undefined } = $$props;
	let { position = undefined } = $$props;
	let { backdrop = undefined } = $$props;
	let { backdropEl = undefined } = $$props;
	let { closeByBackdropClick = undefined } = $$props;
	let { closeByOutsideClick = undefined } = $$props;
	let { closeOnEscape = undefined } = $$props;
	let { push = undefined } = $$props;
	let { swipeToClose = undefined } = $$props;
	let { swipeToStep = undefined } = $$props;
	let { swipeHandler = undefined } = $$props;
	let { containerEl = undefined } = $$props;
	let el;
	let innerEl;
	let f7Sheet;
	const state = { isOpened: opened, isClosing: false };

	function instance() {
		return f7Sheet;
	}

	function onOpen(instance) {
		Object.assign(state, { isOpened: true, isClosing: false });
		emit("sheetOpen", [instance]);
		$$invalidate(4, opened = true);
	}

	function onOpened(instance) {
		emit("sheetOpened", [instance]);
	}

	function onClose(instance) {
		Object.assign(state, { isOpened: false, isClosing: true });
		emit("sheetClose", [instance]);
	}

	function onClosed(instance) {
		Object.assign(state, { isClosing: false });
		emit("sheetClosed", [instance]);
		$$invalidate(4, opened = false);
	}

	function onStepProgress(instance, progress) {
		emit("sheetStepProgress", [instance, progress]);
	}

	function onStepOpen(instance) {
		emit("sheetStepOpen", [instance]);
	}

	function onStepClose(instance) {
		emit("sheetStepClose", [instance]);
	}

	let initialWatched = false;

	function watchOpened(openedPassed) {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7Sheet) return;
		if (openedPassed) f7Sheet.open(); else f7Sheet.close();
	}

	onMount(() => {
		const params = {
			el,
			on: {
				open: onOpen,
				opened: onOpened,
				close: onClose,
				closed: onClosed,
				stepOpen: onStepOpen,
				stepClose: onStepClose,
				stepProgress: onStepProgress
			}
		};

		if (typeof backdrop !== "undefined") params.backdrop = backdrop;
		if (typeof animate !== "undefined") params.animate = animate;
		if (typeof backdropEl !== "undefined") params.backdropEl = backdropEl;
		if (typeof closeByBackdropClick !== "undefined") params.closeByBackdropClick = closeByBackdropClick;
		if (typeof closeByOutsideClick !== "undefined") params.closeByOutsideClick = closeByOutsideClick;
		if (typeof closeOnEscape !== "undefined") params.closeOnEscape = closeOnEscape;
		if (typeof swipeToClose !== "undefined") params.swipeToClose = swipeToClose;
		if (typeof swipeToStep !== "undefined") params.swipeToStep = swipeToStep;
		if (typeof swipeHandler !== "undefined") params.swipeHandler = swipeHandler;
		if (typeof containerEl !== "undefined") params.containerEl = containerEl;

		f7ready(() => {
			if (el && innerEl) {
				const dom7 = f7.$;
				const fixedEls = dom7(innerEl).children(".navbar, .toolbar, .tabbar, .searchbar");

				if (fixedEls.length) {
					dom7(el).prepend(fixedEls);
				}
			}

			f7Sheet = f7.sheet.create(params);

			if (opened) {
				f7Sheet.open(false);
			}
		});
	});

	onDestroy(() => {
		if (f7Sheet) f7Sheet.destroy();
		f7Sheet = null;
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			innerEl = $$value;
			$$invalidate(1, innerEl);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(38, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ("opened" in $$new_props) $$invalidate(4, opened = $$new_props.opened);
		if ("animate" in $$new_props) $$invalidate(6, animate = $$new_props.animate);
		if ("top" in $$new_props) $$invalidate(7, top = $$new_props.top);
		if ("bottom" in $$new_props) $$invalidate(8, bottom = $$new_props.bottom);
		if ("position" in $$new_props) $$invalidate(9, position = $$new_props.position);
		if ("backdrop" in $$new_props) $$invalidate(10, backdrop = $$new_props.backdrop);
		if ("backdropEl" in $$new_props) $$invalidate(11, backdropEl = $$new_props.backdropEl);
		if ("closeByBackdropClick" in $$new_props) $$invalidate(12, closeByBackdropClick = $$new_props.closeByBackdropClick);
		if ("closeByOutsideClick" in $$new_props) $$invalidate(13, closeByOutsideClick = $$new_props.closeByOutsideClick);
		if ("closeOnEscape" in $$new_props) $$invalidate(14, closeOnEscape = $$new_props.closeOnEscape);
		if ("push" in $$new_props) $$invalidate(15, push = $$new_props.push);
		if ("swipeToClose" in $$new_props) $$invalidate(16, swipeToClose = $$new_props.swipeToClose);
		if ("swipeToStep" in $$new_props) $$invalidate(17, swipeToStep = $$new_props.swipeToStep);
		if ("swipeHandler" in $$new_props) $$invalidate(18, swipeHandler = $$new_props.swipeHandler);
		if ("containerEl" in $$new_props) $$invalidate(19, containerEl = $$new_props.containerEl);
		if ("$$scope" in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
	};

	let positionComputed;
	let classes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*position, top, bottom*/ 896) {
			$: $$invalidate(27, positionComputed = (() => {
				if (position) return position;
				if (top) return "top";
				if (bottom) return "bottom";
				return "bottom";
			})());
		}

		$: $$invalidate(2, classes = classNames(className, "sheet-modal", `sheet-modal-${positionComputed}`, { "sheet-modal-push": push }, modalStateClasses(state), colorClasses($$props)));

		if ($$self.$$.dirty[0] & /*opened*/ 16) {
			$: watchOpened(opened);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		el,
		innerEl,
		classes,
		$$restProps,
		opened,
		className,
		animate,
		top,
		bottom,
		position,
		backdrop,
		backdropEl,
		closeByBackdropClick,
		closeByOutsideClick,
		closeOnEscape,
		push,
		swipeToClose,
		swipeToStep,
		swipeHandler,
		containerEl,
		instance,
		$$scope,
		slots,
		div0_binding,
		div1_binding
	];
}

class Sheet extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				class: 5,
				opened: 4,
				animate: 6,
				top: 7,
				bottom: 8,
				position: 9,
				backdrop: 10,
				backdropEl: 11,
				closeByBackdropClick: 12,
				closeByOutsideClick: 13,
				closeOnEscape: 14,
				push: 15,
				swipeToClose: 16,
				swipeToStep: 17,
				swipeHandler: 18,
				containerEl: 19,
				instance: 20
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[20];
	}
}

export default Sheet;