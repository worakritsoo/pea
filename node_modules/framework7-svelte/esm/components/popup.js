/* popup.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount, onDestroy } from "svelte";
import { colorClasses } from "../shared/mixins";
import { classNames, createEmitter } from "../shared/utils";
import { restProps } from "../shared/rest-props";
import { f7, f7ready } from "../shared/f7";
import { modalStateClasses } from "../shared/modal-state-classes";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let div_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[18](div);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				dirty[0] & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[18](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","tabletFullscreen","opened","animate","backdrop","backdropEl","closeByBackdropClick","closeOnEscape","swipeToClose","swipeHandler","push","containerEl","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { tabletFullscreen = undefined } = $$props;
	let { opened = undefined } = $$props;
	let { animate = undefined } = $$props;
	let { backdrop = undefined } = $$props;
	let { backdropEl = undefined } = $$props;
	let { closeByBackdropClick = undefined } = $$props;
	let { closeOnEscape = undefined } = $$props;
	let { swipeToClose = false } = $$props;
	let { swipeHandler = undefined } = $$props;
	let { push = undefined } = $$props;
	let { containerEl = undefined } = $$props;
	let el;
	let f7Popup;
	const state = { isOpened: opened, isClosing: false };

	function instance() {
		return f7Popup;
	}

	function onSwipeStart(instance) {
		emit("popupSwipeStart", [instance]);
	}

	function onSwipeMove(instance) {
		emit("popupSwipeMove", [instance]);
	}

	function onSwipeEnd(instance) {
		emit("popupSwipeEnd", [instance]);
	}

	function onSwipeClose(instance) {
		emit("popupSwipeClose", [instance]);
	}

	function onOpen(instance) {
		Object.assign(state, { isOpened: true, isClosing: false });
		emit("popupOpen", [instance]);
		$$invalidate(3, opened = true);
	}

	function onOpened(instance) {
		emit("popupOpened", [instance]);
	}

	function onClose(instance) {
		Object.assign(state, { isOpened: false, isClosing: true });
		emit("popupClose", [instance]);
	}

	function onClosed(instance) {
		Object.assign(state, { isClosing: false });
		emit("popupClosed", [instance]);
		$$invalidate(3, opened = false);
	}

	let initialWatched = false;

	function watchOpened(openedPassed) {
		if (!initialWatched) {
			initialWatched = true;
			return;
		}

		if (!f7Popup) return;
		if (openedPassed) f7Popup.open(); else f7Popup.close();
	}

	onMount(() => {
		const popupParams = {
			el,
			on: {
				swipeStart: onSwipeStart,
				swipeMove: onSwipeMove,
				swipeEnd: onSwipeEnd,
				swipeClose: onSwipeClose,
				open: onOpen,
				opened: onOpened,
				close: onClose,
				closed: onClosed
			}
		};

		if (typeof closeByBackdropClick !== "undefined") popupParams.closeByBackdropClick = closeByBackdropClick;
		if (typeof closeOnEscape !== "undefined") popupParams.closeOnEscape = closeOnEscape;
		if (typeof animate !== "undefined") popupParams.animate = animate;
		if (typeof backdrop !== "undefined") popupParams.backdrop = backdrop;
		if (typeof backdropEl !== "undefined") popupParams.backdropEl = backdropEl;
		if (typeof swipeToClose !== "undefined") popupParams.swipeToClose = swipeToClose;
		if (typeof swipeHandler !== "undefined") popupParams.swipeHandler = swipeHandler;
		if (typeof containerEl !== "undefined") popupParams.containerEl = containerEl;

		f7ready(() => {
			f7Popup = f7.popup.create(popupParams);

			if (opened) {
				f7Popup.open(false);
			}
		});
	});

	onDestroy(() => {
		if (f7Popup) f7Popup.destroy();
		f7Popup = null;
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(32, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ("tabletFullscreen" in $$new_props) $$invalidate(5, tabletFullscreen = $$new_props.tabletFullscreen);
		if ("opened" in $$new_props) $$invalidate(3, opened = $$new_props.opened);
		if ("animate" in $$new_props) $$invalidate(6, animate = $$new_props.animate);
		if ("backdrop" in $$new_props) $$invalidate(7, backdrop = $$new_props.backdrop);
		if ("backdropEl" in $$new_props) $$invalidate(8, backdropEl = $$new_props.backdropEl);
		if ("closeByBackdropClick" in $$new_props) $$invalidate(9, closeByBackdropClick = $$new_props.closeByBackdropClick);
		if ("closeOnEscape" in $$new_props) $$invalidate(10, closeOnEscape = $$new_props.closeOnEscape);
		if ("swipeToClose" in $$new_props) $$invalidate(11, swipeToClose = $$new_props.swipeToClose);
		if ("swipeHandler" in $$new_props) $$invalidate(12, swipeHandler = $$new_props.swipeHandler);
		if ("push" in $$new_props) $$invalidate(13, push = $$new_props.push);
		if ("containerEl" in $$new_props) $$invalidate(14, containerEl = $$new_props.containerEl);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	let classes;

	$$self.$$.update = () => {
		$: $$invalidate(1, classes = classNames(
			className,
			"popup",
			{
				"popup-tablet-fullscreen": tabletFullscreen,
				"popup-push": push
			},
			modalStateClasses(state),
			colorClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*opened*/ 8) {
			$: watchOpened(opened);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		el,
		classes,
		$$restProps,
		opened,
		className,
		tabletFullscreen,
		animate,
		backdrop,
		backdropEl,
		closeByBackdropClick,
		closeOnEscape,
		swipeToClose,
		swipeHandler,
		push,
		containerEl,
		instance,
		$$scope,
		slots,
		div_binding
	];
}

class Popup extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				class: 4,
				tabletFullscreen: 5,
				opened: 3,
				animate: 6,
				backdrop: 7,
				backdropEl: 8,
				closeByBackdropClick: 9,
				closeOnEscape: 10,
				swipeToClose: 11,
				swipeHandler: 12,
				push: 13,
				containerEl: 14,
				instance: 15
			},
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[15];
	}
}

export default Popup;